# src/schema.graphql
type Query {
# * Playlist!: リスト内の各要素は Playlist 型であり、 null を許容しません。
# * [Playlist!]!: このリスト自体も null を許容しません。
  "Playlists hand-picked to be featured to all users."
  # ^ 下記は クエリのフィールド
  # - Query タイプに定義されたフィールドがエントリーポイントです。
  featuredPlaylists: [Playlist!]!
  playlist(id: ID!): Playlist
}

"A curated collection of tracks designed for a specific activity or mood."
type Playlist {
  "The ID for the playlist."
  id: ID!
  "The name of the playlist."
  name: String!
  "Describes the playlist, what to expect and entices the user to listen."
  description: String
  "The tracks of the playlist. "
  tracks: [Track!]!
}

"A single audio file, usually a song."
type Track {
  "The ID for the track."
  id: ID!
  "The name of the track"
  name: String!
  "The track length in milliseconds. REST APIから返ってくるフィールド名はduration_msですが、ここではdurationMsという名前に変更しています。、そのためにresolvers.tsでタイプリゾルバを設定し、duration_msフィールドをdurationMsに変更している。"
  durationMs: Int!
  "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown)"
  explicit: Boolean!
  "The URI for the track, usually a Spotify link."
  uri: String!
}

type Mutation {
  "Add one or more items to a user's playlist."
  addItemsToPlaylist(input: AddItemsToPlaylistInput): AddItemsToPlaylistPayload!
}

# * 変異フィールドのリターン・タイプは通常、PayloadまたはResponseで終わる。
type AddItemsToPlaylistPayload {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The playlist that contains the newly added items"
  playlist: Playlist # ! Nullable
}

# * GraphQLスキーマにおけるinput型は、引数のセットをグループ化し、別のフィールドの引数として使用できる特別なオブジェクト型です。入力型を使用することで、特に変異に対する引数をグループ化して理解することができます。
input AddItemsToPlaylistInput {
  "The ID of the playlist to add items to"
  playlistId: ID!
  "A comma-separated list of Spotify URIs to add."
  uris: [String!]!
}